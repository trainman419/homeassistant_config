esphome:
  name: "airgradient-1"

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:

globals:
  - id: ota_state
    type: int
    restore_value: no
    initial_value: '-1'
  - id: ota_progress
    type: float
    restore_value: no
    initial_value: '0'
  - id: ota_error
    type: int
    restore_value: no
    initial_value: '0'
ota:
  password: !secret ota_password
  id: my_ota
  on_state_change:
    then:
      - lambda: |-
          id(ota_state) = state;
      - display.page.show: ota_page
      - component.update: oled
  on_progress:
    then:
      - lambda: |-
          if (x >= id(ota_progress) + 5.0) {
            id(ota_progress) = x;
            id(oled)->show_page(id(ota_page));
            id(oled)->update();
          }
  on_error:
    then:
      - lambda: |-
          id(ota_state) = ota::OTA_ERROR;
          id(ota_error) = x;
      - display.page.show: ota_page
      - component.update: oled

# Create a switch for safe_mode in order to flash the device
# Solution from this thread:
# https://community.home-assistant.io/t/esphome-flashing-over-wifi-does-not-work/357352/1
button:
  - platform: template
    name: "Flash Mode (Safe Mode)"
    on_press:
      - lambda: |-
          id(ota_state) = ota::OTA_STARTED;
          id(my_ota)->set_safe_mode_pending(true);
      - display.page.show: safe_mode_page
      - component.update: oled
      - delay: 100ms
      - lambda: |-
          App.safe_reboot();


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 15min

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-65Dc1A"
    password: "bSkqYS4LPInZ"

captive_portal:

i2c:
  sda: D2
  scl: D1

font:
  - file: "font/monofont.ttf"
    id: opensans
    size: 16

display:
  - platform: ssd1306_i2c
    id: oled
    model: "SH1106 128x64"
    pages:
      - id: page1
        lambda: |-
          it.printf(0, 0, id(opensans), "CO2: %.0fppm", id(co2).state);
          it.printf(0, 16, id(opensans), "PM25: %.0f", id(pm25).state);
          it.printf(0, 32, id(opensans), "Hmdty: %.1f", id(humidity).state);
          it.printf(0, 48, id(opensans), "Temp: %.1fF", id(temp).state * (9.0/5.0) + 32.0);
      - id: ota_page
        lambda: |-
          switch (id(ota_state)) {
            case ota::OTA_STARTED:
              it.printf(0, 0, id(opensans), "OTA Started");
              break;
            case ota::OTA_IN_PROGRESS:
              it.printf(0, 0, id(opensans), "OTA %0.1f%%", id(ota_progress));
              break;
            case ota::OTA_COMPLETED:
              it.printf(0, 0, id(opensans), "OTA Complete!");
              break;
            case ota::OTA_ERROR:
              it.printf(0, 0, id(opensans), "OTA update error %d", id(ota_error));
              break;
          }
      - id: safe_mode_page
        lambda: |-
          it.printf(0, 0, id(opensans), "Safe Mode");
          it.printf(0, 16, id(opensans), "Waiting for update");
#      - id: page2
#        lambda: |-
#          it.printf(0, 0, id(opensans), "PM10 : %.0f", id(pm10).state);
#          it.printf(0, 10, id(opensans), "PM25 : %.0f", id(pm25).state);
#          it.printf(0, 20, id(opensans), "PM100: %.0f", id(pm100).state);
# Maybe add a page later

interval:
  - interval: 1s
    then:
      - if:
          condition:
          - lambda: "return id(ota_state) == -1;"
          then:
          - display.page.show: page1
          - component.update: oled

uart:
  - rx_pin: D5
    tx_pin: D6
    baud_rate: 9600
    id: uart1
    
  - rx_pin: D4
    tx_pin: D3
    baud_rate: 9600
    id: uart2

sensor:
  - platform: sht3xd
    temperature:
      id: temp
      name: "Temperature"
    humidity:
      id: humidity
      name: "Humidity"
    address: 0x44
    update_interval: 5s

  - platform: pmsx003
    # type can be PMSX003, PMS5003S, PMS5003T, PMS5003ST
    # https://esphome.io/components/sensor/pmsx003.html
    type: PMSX003
    uart_id: uart1
    pm_1_0:
      id: pm10
      name: "Particulate Matter <1.0µm Concentration"
    pm_2_5:
      id: pm25
      name: "Particulate Matter <2.5µm Concentration"
    pm_10_0:
      id: pm100
      name: "Particulate Matter <10.0µm Concentration"
#    formaldehyde:
#      id: hcho
#      name: "Formaldehyde (HCHO) concentration in µg per cubic meter"

  - platform: senseair
    uart_id: uart2
    co2:
      id: co2
      name: "SenseAir CO2 Value"
    update_interval: 60s   